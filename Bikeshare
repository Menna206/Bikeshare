import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters(city, month, day):
  """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
while True:
    city = input("write a city name: chicago, new york city or washington!").lower()
    if city not in CITY_DATA:
        print("\nNot available\n")
        continue
    else:
        break

    # TO DO: get user input for month (all, january, february, ... , june)
While True:
    time = input(" do you prefer to filter by month, day, all or none?").lower()
    if time == 'day':
        day = input("On which day? Saturday, Sunday, Monday, Tuesday, Wednesday, Thursday or Friday?").lower()
        month = 'all'
        break
        
    elif time == 'month':
        month = input("In Which month? January, February, March, April, May, June?").lower()
        day = 'all'
        break
        
    elif time == 'all':
        day = input("On which day? Saturday, Sunday, Monday, Tuesday, Wednesday, Thursday or Friday?").lower()
        month = input("In Which month? January, February, March, April, May, June?").lower()
        break
        
    elif time == 'none':
        day = 'all'
        month = 'all'
        break
        
    else:
        input("Something is wrong! You misspelled a word! Kindly type again. do you prefer to filter by month, day, all or none?")
        break
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    print(city)
    print(month)
    print(day)
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
common_month = df['month'].mode()[0]
print(common_month)

    # TO DO: display the most common day of week
common_day_of_week = df['day'].mode()[0]
print(common_day_of_week)

    # TO DO: display the most common start hour
df['hour'] = df['Start Time'].dt.hour
common_start_hour = df['hour'].mode()[0]
print(common_start_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
print(df['Start Station'].mode()[0])

    # TO DO: display most commonly used end station
print(df['End Station'].mode()[0])
    # TO DO: display most frequent combination of start station and end station trip


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
print(df['Trip Duration'].sum()[0])
    # TO DO: display mean travel time
print(df['Trip Duration'].mean()[0])

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
print(df['User Types'].value_counts())

    # TO DO: Display counts of gender
print(df['Gender'].value_counts())

    # TO DO: Display earliest, most recent, and most common year of birth


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
